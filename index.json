[
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/4.1-createtunnelipsec/",
	"title": "Create IPSEC Tunnel",
	"tags": [],
	"description": "",
	"content": "In this exercise, we will create and configure IPSEC on the Fortigate device based on the Configuration file downloaded from Amazon.\n1 Important note is that this Configuration file contains all the configuration parameters for all exercises from 4.1 -\u0026gt; 4.5.\nAccess VPC\nSelect Site-to-Site VPN Connection Select the created VPN Connection Select Download Configuration In the Download Configuration dialog, choose the appropriate appliance: In this exercise, we will use Fortigate.\nVendor: Select Fortinet Platform: Select Fortigate 40+series Software: Select FortiOS 6.4.4+ (GUI) IKE version: Select ikev1 Select Download. Note that in this step, we choose ikev1 to help you understand the basic configuration for easier troubleshooting. For actual deployment, you should use ikev2. The biggest advantage of ikev2 is that the handshake negotiation process between the two sites will be faster and support more security algorithms.\ndownload-configuration Save the configuration file information to a folder:\nThen, based on the provided configuration, configure these settings for your device. In the Fortigate interface, create VPN tunnel 1:\nSelect VPN -\u0026gt; IPsec Wizard Template type select Custom Enter Name as VPN AWS Tunnel 1 Select Next In the New VPN Tunnel interface, create tunnel 1 for the VPN:\nPhase 1 Enter IP address as 18.143.226.251 Select Interface as Wan Internet(Wan 1) Select NAT Traversal as Disable Enter Pre-shared Key as provided in the file DS6CXQf8YMvA0E4wRo4uDGRtcVofGiad In Phase 1 Proposal, delete all previous lines and configure Encryption as AES128, Authentication as SHA1 Uncheck 14,5 in Diffie-Hellman Groups. Only select 2 Enter Key Lifetime (seconds) as 28800 Phase 2 Click + in Phase 2 Selectors In Phase 2 Proposal, delete all previous lines and configure Encryption as AES128, Authentication as SHA1 Uncheck 14,5 in Diffie-Hellman Groups. Only select 2 Select Auto-negotiate Enter Seconds as 3600 Click OK to create In the New VPN Tunnel interface, do the same for tunnel 2 as for tunnel 1:\nReopen the previously downloaded config file, find and open the parameters for tunnel 2 Configure Phase1 and Phase2 similarly to Tunnel 1 Verify the interface to ensure we have a total of 2 tunnels configured "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC Access the VPC service management interface Click Your VPCs. Click Create VPC. On the Create VPC page: In the Name tag field, enter ASG. In the IPv4 CIDR field, enter: 10.10.0.0/16. Click Create VPC. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/3-vpnsitetositeaws/3.1-createvirtualprivategateway/",
	"title": "Creating a Virtual Private Gateway",
	"tags": [],
	"description": "",
	"content": "Creating a Virtual Private Gateway Access the VPC Console\nSelect Virtual Private Gateway Click Create Virtual Private Gateway In the Create Virtual Private Gateway Interface\nFor the Name tag, enter VPN TO DC Select Amazon default ASN Click Create virtual private gateway Attach the Virtual Private Gateway to a VPC\nClick Actions Select Attach to VPC In the Attach to VPC Interface\nChoose VPC ASG Click Attach to VPC Complete the Process and Check that the State is Attached "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "AWS Site-to-Site VPN is a service that helps securely connect on-premises networks with the AWS cloud over the internet. AWS Site-to-Site VPN allows the creation of an encrypted VPN connection between the on-premises network and AWS, supporting high-security standards, ensuring strict security, and maintaining a stable connection with your network system.\nBy using AWS Site-to-Site VPN, you will gain the following benefits:\nEnsure high security with data encryption throughout the transmission process. Easily integrate with other AWS services such as EC2, VPC, S3, CloudWatch, etc. Centralized management and simplified connection with multiple branches. Support routing protocols like Static Route and BGP to optimize routing. AWS Site-to-Site VPN helps save time and costs, while simplifying the deployment and maintenance of secure connections between on-premises and AWS. With these advantages, you can also use VPN instead of Direct Connect, which helps save costs when it comes to transmission lines. VPN Cost of Site-to-Site VPN is calculated based on a fixed cost of approximately 36 USD per month for one VPN Connection. This cost does not include the traffic cost going out of the VPC.\n"
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/",
	"title": "Preparing VPC and EC2",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with 2 public / private subnets. Then create 1 EC2 Instance Linux located in the public subnet, 1 EC2 Instance Windows located in the private subnet.\nThe architecture overview after you complete this step will be as follows:\nTo learn how to create EC2 instances and VPCs with public/private subnets, you can refer to the lab:\nAbout Amazon EC2 Works with Amazon VPC Content Create VPC Create Public Subnet Create Private Subnet Create security group Create public Linux server Create private Windows server "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/4.2-configinterfacetunnel/",
	"title": "Configure Interface Tunnel 1 &amp; 2 on Fortigate",
	"tags": [],
	"description": "",
	"content": "In the Fortigate configuration interface:\nConfigure Interface Tunnel 1\nIn Network -\u0026gt; Interface WAN1 -\u0026gt; Click + -\u0026gt; Select VPN AWS Tunnel 1 -\u0026gt; Click Edit Enter IP as 169.254.52.6 Enter Remote IP/Netmask as 169.254.52.5/30 Select Administrative Access as Ping Select Status as Enable Click OK Configure Interface Tunnel 2\nEnter IP as 169.254.52.6 Enter Remote IP/Netmask as 169.254.52.5/30 Select Administrative Access as Ping Select Status as Enable Click OK Verify the 2 interface tunnels created "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/3-vpnsitetositeaws/3.2-createcustomergateway/",
	"title": "Create Customer Gateways",
	"tags": [],
	"description": "",
	"content": " Creating a Customer Gateway Access the VPC Console\nSelect Customer Gateways Click Create Customer Gateway In the Create Customer Gateway Interface\nFor the Name tag, enter Customer Gateway For the IP address, enter the public IP address of Fortigate 100F Click Create Customer Gateway Device - Optional: Enter Fortigate Wait approximately 5 minutes for the Customer Gateway creation to complete "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.2-createiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Create IAM Role In this step, we will create an IAM Role. This IAM Role will be assigned the AmazonSSMManagedInstanceCore and CloudwatchLogsFullAccess policies, which allow the EC2 instance to communicate with the Session Manager and Cloud Watch log.\nGo to the IAM service management interface In the left navigation pane, select Roles. Click Create role. Click AWS service and click EC2. Click Next: Permissions. In the search bar, Enter AmazonSSMManagedInstanceCore and press Enter to search for this policy. Select the AmazonSSMManagedInstanceCore policy. Continue to enter CloudwatchLogsFullAccess and press Enter to search for this policy. Select the CloudwatchLogsFullAccess policy. Click Next: Tags. Click Next: Review. Name the Role SSM-Role in the Role Name field Click Create Role Next, we will assign this role to the public and private EC2 instances. Go to the EC2 management interface. Click Instances Check EC2_Private Click Action -\u0026gt; Click Security Click Change security groups Select the newly created SSM-Role. Click Update IAM role "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Create Public Subnet",
	"tags": [],
	"description": "",
	"content": "Create Public Subnet Click Subnets. Click Create subnet. On the Create subnet page: In the VPC ID field, select Lab VPC. In the Subnet name field, enter Public Subnet 1. In the Availability Zone field, select the first Availability Zone. In the IPv4 CIDR block field, enter 10.10.1.0/24. Scroll to the bottom of the page and click Create subnet.\nSelect Public Subnet 1.\nClick Actions. Click Edit subnet settings. Select Enable auto-assign public IPv4 address. Click Save. Click Internet Gateways. Click Create internet gateway. On the Create internet gateway page: In the Name tag field, enter Lab IGW. Click Create internet gateway. After successful creation, click Actions. Click Attach to VPC. On the Attach to VPC page: In the Available VPCs field, select ASG. Click Attach internet gateway. Verify the successful attachment as shown below. Next, we will create a custom route table to associate with the Public Subnet. Click Route Tables. Click Create route table. On the Create route table page: In the Name field, enter Route Table Public. In the VPC field, select ASG. Click Create route table. After successfully creating the route table: Click Edit routes. On the Edit routes page: Click Add route. In the Destination field, enter 0.0.0.0/0. In the Target field, select Internet Gateway and then select the previously created Lab IGW. Click Save changes. Click the Subnet associations tab. Click Edit subnet associations to associate the custom route table we just created with the Lab Public Subnet. On the Edit subnet associations page: Select Lab Public Subnet. Click Save associations. Verify that the route table has been associated with the Lab Public Subnet and that the route to the internet is directed to the Internet Gateway as shown below. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "\rBefore starting to configure VPN with AWS and Fortinet, you should prepare some knowledge about static and dynamic routing protocols. You can refer to a brief introduction about Dynamic Routing BGP which will be used in this lab in section 4.\nTo perform this lab, you need to further study Fortigate firewall. You can virtualize this firewall on VMware with a 14-day license for the lab. Here, I am using Fortigate 100F hardware (Version v6.4.12 build2060 (GA)).\nYou need to create 2 Linux instances in the public subnet and private subnet to perform this practice.\nTo learn how to create EC2 instances and VPC with public/private subnets, you can refer to the following labs:\nIntroduction to Amazon EC2 Working with Amazon VPC To learn how to create IAM roles with ssm and cloudwatch permissions, you can refer to the following labs:\nAWS CloudWatch Workshop Working with Amazon System Manager - Session Manager To learn about routing protocols, you can refer to:\nBorder Gateway Protocol (BGP) Appendix\nPrepare VPC and EC2 Instance Create IAM Role Create CloudWatch Log Group Enable ssm feature to store logs in CloudWatch Prepare Fortigate device "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/4.3-configroutingbgp/",
	"title": "Configure Dynamic Route BGP",
	"tags": [],
	"description": "",
	"content": " In the Fortigate configuration interface, configure routing for both tunnels according to the file: Select Network -\u0026gt; Select BGP Input Router-ID as 118.107.96.13 Select Apply Select Neighbor -\u0026gt; Create new. The Add Neighbor dialog appears to configure tunnel 1 Input IP as 169.254.52.5, Remote AS as 64512 Input IP/Netmask as 172.16.4.0/24. This is the address range that Fortigate will use to advertise to AWS Note that this configuration is slightly different from the file. If you need to advertise any network layer to AWS, fill in each network layer.\nConfigure neighbors for tunnel 2 Select Neighbors -\u0026gt; Create New. The Add Neighbor dialog appears to configure tunnel 2 Input IP as 169.254.52.5, Remote AS as 64512 -\u0026gt; Select OK Select Apply "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/3-vpnsitetositeaws/",
	"title": "Configuring Site to Site VPN on AWS",
	"tags": [],
	"description": "",
	"content": "We connect the On-premise Data Center to Amazon VPC using a Fortigate hardware VPN. To establish a Site to Site VPN connection, we need to create and configure a Virtual Private Gateway (VPG) and a Customer Gateway (CGW).\nThe Virtual Private Gateway (VPG) is a control center for managing the VPN connection installed at the AWS end. A Customer Gateway (CGW) is a component that represents the hardware or software VPN device installed at the customer end, which in this case is Fortigate. A VPN tunnel will be established once data traffic is transmitted between AWS and the customer\u0026rsquo;s network. In this connection, we must specify the type of routing used to ensure the security and quality of data transmission. If the CGW on the customer side supports Border Gateway Protocol (BGP), dynamic routing must be set in the VPN connection configuration. Amazon VPC provides various types of CGWs, each associated with a VPG, but a single VPG can be linked with multiple CGWs (many-to-one design). To support this model, the CGW’s IP address must be unique within a region. Amazon VPC also provides the necessary information for network administrators to configure the CGW and establish a VPN connection to the VPG on AWS. The VPN connection always includes two Internet Protocol Security (IPSec) tunnels to ensure high availability.\nBelow are the key characteristics of VPG, CGW, and VPN:\nVPG is the endpoint of the VPN tunnel on AWS. CGW can be a hardware device or a software application located at the customer\u0026rsquo;s end of the VPN tunnel. You must initiate the VPN tunnel connection from the CGW to the VPG. VPG supports both dynamic routing (BGP) and static routing. The VPN connection always has two tunnels to ensure high availability of the connection to the VPC from the customer site. This lab helps us learn how to set up a Site to Site VPN connection in AWS. In practice, this solution is quite popular among enterprises due to the widespread use and ease of configuration of Fortigate devices, which are commonly used in businesses. AWS also provides configuration guides for each type of Customer Gateway device in a configuration file. The only concern for the customer is to prepare the internet connection, from which a secure and private tunnel (using IPSec) is created to connect to AWS via the AWS VPN tunnel. Within the scope of this lab, we assume that we have a Main office (VPC ASG) and a Branch office located in an On-premises Data Center to differentiate the network. In the VPC, we create an EC2 instance with SSM enabled and a PC in the DC. Our task is to configure the VPN so that the Private IP addresses on both ends can ping each other using the Site-to-Site VPN.\nAppendix:\nCreate Virtual Private Gateway Configure Customer Gateway Create VPN Connection "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.3-createloggroup/",
	"title": "Create CloudWatch Log Groups",
	"tags": [],
	"description": "",
	"content": "Create CloudWatch LogGroup In this step, we will create 2 Cloud Watch Log Groups. The purpose:\nStore and categorize AWS VPN logs to easily check and know the VPN status. Store and categorize command logs used when accessing EC2 via SSM. Go to the Cloud Watch service management interface\nCreate Log Groups for SSM:\nSelect Log Groups Select Create log group Enter /aws/ssm/hosts as the log group name Select Create Similarly, create Log Groups for VPN:\nEnter vpns2s/log as the Name "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/2.1.3-createprivatesubnet/",
	"title": "Create Private Subnet",
	"tags": [],
	"description": "",
	"content": "Create Private Subnet In the VPC interface, click Subnets. Click Create subnet. On the Create subnet page:\nIn the VPC ID field, select ASG. In the Subnet name field, enter Private Subnet 1. In the Availability Zone field, select the first Availability Zone. In the IPv4 CIDR block field, enter 10.10.100.0/24. Scroll to the bottom of the page and click Create subnet. Repeat the above steps to create Private Subnet 2. Next, we will create a custom route table to associate with the Private Subnet.\nClick Route Tables. Click Create route table. On the Create route table page:\nIn the Name field, enter Route Table Private. In the VPC field, select ASG. Click Create route table. In the Route table - Private interface:\nSelect Subnet Associations. Select Edit subnet associations. In the Edit subnet associations interface:\nSelect the 2 private subnets. Click Save associations. The next step is to create NAT gateways to allow EC2 instances in the private subnet to communicate with the internet.\nCreate NAT Gateway In this step, we will create a NAT gateway to allow EC2 instances in the private subnet to access the internet.\nAccess the VPC management interface. In the NAT gateway interface:\nIn the Name field, enter My Natgw. In the Subnet field, select Public subnet 2. In the Connectivity type field, select Public. In the Elastic IP allocation ID field, click Allocate Elastic IP to create an Elastic IP. Click Create Nat Gateway. Successfully created NAT gateway. In the Route table - Private interface:\nSelect Routes. Select Edit routes. In the Edit routes interface:\nSelect Add route. In the Destination field, enter 0.0.0.0/0. In the Target field, select NAT Gateway. Click Save changes. Verify the routes. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/3-vpnsitetositeaws/3.3-createvpn/",
	"title": "Creating a VPN Connection",
	"tags": [],
	"description": "",
	"content": " Creating a VPN Connection Access the VPC Console\nSelect Site-to-Site VPN Connections Click Create VPN Connection In the Create VPN Connection Interface\nFor the Name tag, enter VPN Connection to DC Target Gateway Type: Select Virtual Private Gateway Virtual Private Gateway: Select VPN Gateway Customer Gateway: Existing Customer Gateway ID: Select Customer Gateway Routing Options: Dynamic (Requires BGP) Local IPv4 network CIDR: You can leave this blank or enter the local IP at the DC. In this example, enter 172.16.4.0/24 Remote IPv4 network CIDR: You can leave this blank or enter the AWS CIDR. In this example, it is 10.10.0.0/16 Continue with the Configuration\nExpand Tunnel 1 options - Optional. Under Tunnel Active – Select Enable to send VPN logs to CloudWatch Amazon CloudWatch log group: Select vpns2s/log Similarly, enable in Tunnel 2 options Click Create VPN Connection Click Create VPN Connection Wait approximately 5 minutes for the VPN Connection creation to complete Configure Propagation for the Route Tables\nIn the VPC interface, select Route Tables Choose Route Table - Public Select Route Propagation Click Edit Route Propagation In the Edit Route Propagation Interface\nSelect Enable Click Save Complete and Verify that Route Propagation has switched to Yes Similarly, configure Route Propagation for the Private Subnet "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/",
	"title": "Configuring Site-to-Site VPN on Fortigate",
	"tags": [],
	"description": "",
	"content": "Before configuring, let\u0026rsquo;s briefly understand the dynamic routing protocol BGP and why it should be used.\nBorder Gateway Protocol (BGP) is a dynamic routing protocol used on the Internet to exchange information between different networks. It is one of the most important protocols that help network systems exchange information and determine the optimal path for data transmission. BGP is designed to operate in large network systems, especially in the global Internet network, where hundreds of thousands of networks need to be interconnected. BGP can determine the data transmission path based on multiple attributes such as bandwidth, quality, and the number of network hops the data needs to traverse. This helps the protocol choose the most optimal path to transmit data from source to destination efficiently and quickly.\nAdditionally, BGP plays a role in keeping the Internet operating stably by periodically updating routing information, reliably and flexibly. BGP is a good choice for large, complex networks that require automation and flexibility if there are many networks. Compared to static routes, BGP has superior advantages:\nAttribute BGP (Border Gateway Protocol) Static Route Automation and Flexibility Automatically learns and adjusts routes when there are changes in the network. Requires manual configuration of all routes, manual updates needed when changes occur. Scalability Suitable for large networks, handles millions of routes. Suitable for small or simple networks, difficult to manage as the network expands. Routing Policies Supports complex routing policies based on multiple attributes. Does not support complex routing policies. Resilience Automatically switches routes in case of failure, ensuring quick recovery. Manual configuration of backup routes required, not flexible. Security Supports security mechanisms like MD5, but requires complex management. Simpler, less prone to attacks but can still be misconfigured. Use Cases Suitable for large, complex networks with multiple ISPs, requiring automation and quick recovery. Suitable for small, simple networks, not requiring automation or complex recovery. Contents Create IP Sec Tunnel Configure Tunnel 1 and Tunnel 2 Interfaces Configure BGP Routing Create Policies for VPN Check VPN Status "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/4.4-createpolicy/",
	"title": "Create Policy for VPN",
	"tags": [],
	"description": "",
	"content": "By default, the Firewall will block all network traffic on all ports. In this section, you will open access policies for both directions of the VPN on both tunnels.\nNote that you still need to refer to the file downloaded from AWS, which contains instructions for configuring this policy.\nConfigure the VPN access policy from DC to AWS for tunnel 1.\nIn the Fortigate configuration interface:\nSelect Policy \u0026amp; Objects Select Firewall Policy Select Create New Enter Name as DC TO AWS Tunnel 1 Select Incoming Interface as LAN(Port6) Select Outgoing Interface as VPN AWS Tunnel1 Select Source as All Select Destination as All Select Service as All Uncheck NAT Select Log Allowed Traffic as ALL Sessions to log all access records Click OK Configure the VPN access policy from AWS back to DC for tunnel 1.\nIn the Fortigate configuration interface:\nSelect Policy \u0026amp; Objects Select Firewall Policy Select Create New Enter Name as AWS TO DC Tunnel 1 Select Incoming Interface as VPN AWS Tunnel1 Select Outgoing Interface as LAN(Port6) Select Source as All Select Destination as All Select Service as All Uncheck NAT Select Log Allowed Traffic as ALL Sessions to log all access records Click OK Configure similar access policies for tunnel 2 in both directions. After completing this, you will have a total of 4 policies. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/2.1.4-createsecgroup/",
	"title": "Create Security Groups",
	"tags": [],
	"description": "",
	"content": "Create Security Groups In this step, we will create the security groups used for our instances.\nCreate a Security Group for Linux Instance in the Public Subnet Access the VPC management console Click Security Group. Click Create security group. In the Security group name field, input public_security_group. In the Description field, input SG Public for EC2 Public. In the VPC field, select the VPC ASG you created for this lab. In the Inbound rule section, add 2 rules: SSH and All ICMP - IPV4 Keep the Outbound rule as is, scroll down. Click Create security group. You can see that the security group we created for the Linux public instance does not need to open traditional ports for ssh like port 22.\nCreate a Security Group for EC2 Instance in the Private Subnet After successfully creating the security group for the Linux instance in the public subnet, click the Security Groups link to return to the Security groups list. Click Create security group.\nIn the Security group name field, input private_security_group.\nIn the Description field, input SG for EC2 Private. In the VPC field, select the ASG you created for this lab. In the Inbound rule section, add 1 rule: All ICMP - IPV4. This rule allows ping from EC2 in the private subnet. Keep the Outbound rule as is, scroll down. Click Create security group. For instances in the private subnet, we will use Session Manager through a TLS-encrypted connection. Therefore, we can connect through the NAT gateway. To optimize costs, you can use the Session Manager endpoint instead of going out to the internet via the NAT gateway. Here, my lab focuses more on VPN, so if you deploy the endpoint, refer to the lab Working with Amazon System Manager - Session Manager\n"
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.4-enablelogssm/",
	"title": "Manage SSM Session Logs with CloudWatch Logs",
	"tags": [],
	"description": "",
	"content": "In this step, we will enable the CloudWatch feature in SSM to allow access logs and command execution logs when users access EC2 to be pushed to CloudWatch.\nIn the AWS Systems Manager interface:\nSelect Session Manager. Select the Preferences tab. Select Edit. In the CloudWatch logging section: Select Enable. Uncheck Enforce encryption. Select vpns2s/log. Select Save. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/4-vpnsitetositefortigate/4.5-checkstatusvpn/",
	"title": "Check VPN Status",
	"tags": [],
	"description": "",
	"content": " Access CloudWatch logs to view logs for phase 1 and phase 2 of the VPN In the CloudWatch interface\nSelect Log groups, choose vpns2s/log, each Log streams represents a tunnel. If the status of ike_phase1_state and ike_phase2_state are both established, then the VPN is up. If not, use the logs here to diagnose the issue. To ensure, check the tunnel status on both site interfaces:\nVPN tunnel status up on Fortigate VPN status on AWS Check the routing table\nThe routing table on AWS will automatically show the 172.16.4.0/24 subnet of the DC On the Fortigate interface, select Dashboard, click +, enter Routing, then click +, and select Add Monitor to create a Monitor Route table In the Dashboard, select Routing Monitor to see the appearance of the AWS subnet on Fortigate Note: You will only see one route on the Interfaces of VPN AWS Tunnel 1 because the route is dynamic, so both Fortigate and AWS sites will automatically negotiate to select one tunnel for data transmission. Tunnel 2 will be in backup state when there is downtime on tunnel 1 on AWS.\nYou can test this by shutting down interface tunnel 1.\nCheck ping from DC to EC2 Private and vice versa Connect to EC2_Private using System Manager to ping and check the IP. "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/5-cleanup/",
	"title": "Clean Up Resources",
	"tags": [],
	"description": "",
	"content": "We will follow these steps to sequentially delete the resources we created in this exercise. If you deployed VPC, EC2, ElasticIP, NATGW using Terraform in section 2.6, you can delete them using Terraform without having to delete them manually. Refer to Step 8.\nDelete EC2 instances. Go to the EC2 service management interface\nClick Instances. Select both EC2_Public and EC2_Private instances. Click Instance state. Click Terminate instance, then click Terminate(Delete) instance to confirm. Click to confirm Terminate(Delete) instance NAT Gateway\nDelete the NAT Gateway and Elastic IP Address. AWS charges for unused EIPs, so you need to check carefully to avoid unwanted costs. Go to the Amazon VPC console. In the left navigation pane, click NAT Gateway. Select NAT Gateway. Click Action. Click Delete NAT Gateway. Type delete. Click Delete to confirm the deletion of the NAT Gateway Elastic IP Address\nContinue to delete the Elastic IP Address. In the left navigation pane, click Elastic IP. Select the Elastic IP Address we created. Click Actions Click Release Elastic IP Address Click Release. Delete VPN Site to Site Connection.\nIn the VPC interface Select Site-to-Site VPN connections on the left Select Actions Select Delete VPN connection Type delete Click Delete to confirm the deletion of the VPN Delete Virtual Private Gateway (VPG).\nIn the VPC interface Select Virtual private gateways Select Actions Select Detach from VPC Click Detach virtual private gateway Select Virtual private gateways Select Actions Select Delete virtual private gateway Delete Customer Gateway (CG).\nIn the VPC interface Select Customer gateways on the left Select Actions Select Delete customer gateways Delete VPC ASG.\nIn the VPC interface Select ASG Select Actions Select Delete VPC Delete resources in steps 1, 2, 3, 7 Enter the command terraform destroy -auto-approve. All resources will be deleted after 3 minutes Complete the deletion of all resources "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.1-createec2/2.1.5-createec2linux/",
	"title": "Create EC2 in Private Subnet and Public Subnet",
	"tags": [],
	"description": "",
	"content": " Access the EC2 service management interface Click Instances. Click Launch instances. On the Step 1: Choose an Amazon Machine Image (AMI) page: Click Select to choose the Amazon Linux 2 AMI. Scroll down to: Select the instance type t2.micro. In the Network field, select ASG. In the Subnet field, select Public Subnet 1. In the Auto-assign Public IP field, select Enable. Select Select an existing security group. Select the security group public_security_group. In the Advanced Details section: In the IAM instance profile field, select SSM-Role. Click Launch instance. Repeat steps 2-4 to create another EC2 instance, but note the following changes: In the Subnet field, select Private Subnet 2. In the Auto-assign Public IP field, select Disable. Select the security group private_security_group. Follow the rest of the steps as in steps 2-4. After creation, you should see the following result: "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.5-fortigate/",
	"title": "Prepare On-Premise Environment",
	"tags": [],
	"description": "",
	"content": "In this exercise, we will build an on-premise datacenter model according to the diagram below:\nNote that in this lab, I am using version 6.4.12 build 2060 (GA). This lab can be deployed on many versions 6 and 7.\nConfigure WAN Interface and Local Interface. In the Fortigate configuration interface:\nSelect Network -\u0026gt; Select Interface WAN1 -\u0026gt; Click Edit. In the Alias field, input Wan Internet. In the Address mode field, select Manual. In the IP/Netmask field, input the ISP-provided IP 118.107.96.13/24. In the Administrative Access IPv4 field, select Ping. In the Status field, select Enabled. Click OK. Next, configure the Local DC IP: Select Network -\u0026gt; Select Interface LAN (Port6) -\u0026gt; Click Edit. In the Alias field, input LAN. In the Address mode field, select Manual. In the IP/Netmask field, input the local IP 172.16.4.1/24. In the Administrative Access IPv4 field, select Ping. In the Status field, select Enabled. Click OK. Configure routing so that the WAN interface can access the internet.\nSelect Network -\u0026gt; Select Static Routes -\u0026gt; Click Create New. In the Gateway Address field, input 118.107.96.1. Click OK. Note that the range 118.107.96.0/24 configured in this lab is a public IP address range provided by the ISP, which includes the IP Gateway address.\n"
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/2-prerequiste/2.6-repairbycodeoptional/",
	"title": "Prepare Environment with Code (Optional)",
	"tags": [],
	"description": "",
	"content": "In this section, we will guide you on how to deploy the environment as in sections 2.1 and 2.2 using Infrastructure as Code. Since the process is repeated many times, creating and configuring the lab in sections 2.1 and 2.2 takes a lot of time. Therefore, this section will guide you through some basic commands to deploy the environment as in sections 2.1 and 2.2 using Terraform.\nThis code will create the entire environment as in sections 2.1 and 2.2 Code here\nTo use and write Terraform, you need to learn how to install and write code with Terraform:\nInstall Terraform Module deployment syntax Use available built-in modules Install Terraform plugin for VS Code To deploy using Terraform on Amazon, you need to install and configure the AWS CLI with access key and secret key credentials. Refer to:\nInstall and get familiar with AWS CLI on Windows Usage Instructions:\nOpen the INFRAASCODE_AWS source folder in VS Code Navigate to the Singapore directory Find the terraform.tfvars file to declare the necessary information to initialize all resources in labs 2.1 and 2.2 region = \u0026ldquo;ap-southeast-1\u0026rdquo; availability_zone_1 = \u0026ldquo;ap-southeast-1a\u0026rdquo; availability_zone_2 = \u0026ldquo;ap-southeast-1b\u0026rdquo; cidr_block = \u0026ldquo;10.10.0.0/16\u0026rdquo; public_subnet_ips = [\u0026ldquo;10.10.1.0/24\u0026rdquo;, \u0026ldquo;10.10.2.0/24\u0026rdquo;] private_subnet_ips = [\u0026ldquo;10.10.100.0/24\u0026rdquo;, \u0026ldquo;10.10.200.0/24\u0026rdquo;] instance_type = \u0026ldquo;t2.micro\u0026rdquo; role_name = \u0026ldquo;SSM-Role\u0026rdquo; Open PowerShell in VS Code. Navigate to the Singapore directory Enter terraform init to download the necessary modules and plugins for AWS. After downloading, enter terraform plan to check the information of the resources to be created. A total of 26 resources will be deployed to AWS After careful checking, enter terraform apply to start deploying resources to AWS Check the information one more time. At Enter a value, enter yes to deploy. Enter no if you do not want to deploy The deployment process takes a few minutes "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Deploy Site-to-Site VPN with On-Premise DC using Dynamic Route Overview In this lab, you will learn the steps to establish a connection between the Amazon Web Service Site and the On-Premise DC Site using the Fortigate 100F device. Practice creating a connection between VPN servers on AWS and machines in the On-Premise data center.\nContents Introduction Preparation Steps AWS Site-to-Site VPN Configure Site-to-Site VPN on Fortigate Clean Up Resources "
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://ztieuyeuz.github.io/webaws.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]